name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v4

      # # Login no Docker Hub
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # Build e push da imagem Docker
      # - name: Build and push Docker image
      #   run: |
      #     docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .
      #     docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

      # Opcional: Configuração VPN (descomente se necessário)
      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install -y openvpn #openvpn-systemd-resolved

      - name: Setup and Connect to VPN
        uses: kota65535/github-openvpn-connect-action@v2
        with:
          config_file_contents: ${{ secrets.VPN_CONFIG }}
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}
          extra_files: |
            [
              {
                "path": "cert_export_CA.crt",
                "contents": "${{ secrets.VPN_CA_CERT }}"
              }
            ]

      # Configurar SSH
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

          # Verificar configuração SSH
          echo "Conteúdo do diretório ~/.ssh:"
          ls -la ~/.ssh/

      # Deploy no VPS via SSH com modo verboso para diagnóstico
      - name: Deploy to VPS
        run: |
          echo "Tentando conexão SSH com modo verboso:"
          ssh -v -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            whoami
            echo "Conexão SSH estabelecida com sucesso!"
            pwd
          EOF

          # Se a conexão for bem-sucedida, continuar com o deploy
          echo "Executando comandos de deployment:"
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            whoami
          EOF
