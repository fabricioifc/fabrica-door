name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Baixa o código do repositório
      - uses: actions/checkout@v3

      # 2. Configura o Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Constrói e publica a imagem Docker
      - name: Build and Push Docker Image
        run: |
          docker build -t fabrica-door:latest .
          docker tag fabrica-door:latest fabricioifc/fabrica-door:${{ github.sha }}
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push fabricioifc/fabrica-door:${{ github.sha }}

      # 4. Instala cliente VPN (exemplo: OpenVPN)
      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install -y openvpn

      # 5. Conecta à VPN
      - name: Connect to VPN with Detailed Diagnostics
        run: |
          # Instala o OpenVPN e ferramentas de rede para diagnóstico
          sudo apt-get update
          sudo apt-get install -y openvpn net-tools tcpdump

          # Mostra interfaces de rede antes da conexão
          echo "==== Interfaces de rede antes da conexão ===="
          ip addr
          echo "============================================="

          # Escreve o arquivo de configuração da VPN
          echo "$VPN_CONFIG" > vpn-config.ovpn
          chmod 600 vpn-config.ovpn

          # Valida o formato do arquivo de configuração
          echo "==== Validando arquivo de configuração VPN ===="
          openvpn --config vpn-config.ovpn --show-configs || echo "Erro na configuração da VPN"

          # Verifica se servidor VPN está acessível
          echo "==== Testando conectividade com servidor VPN ===="
          # Extrai o servidor do arquivo config (isso pode variar dependendo do formato do arquivo)
          VPN_SERVER=$(grep -E '^remote\s+' vpn-config.ovpn | head -1 | awk '{print $2}')
          VPN_PORT=$(grep -E '^remote\s+' vpn-config.ovpn | head -1 | awk '{print $3}')

          if [ -n "$VPN_SERVER" ]; then
            echo "Servidor VPN: $VPN_SERVER"
            echo "Testando ping para $VPN_SERVER:"
            ping -c 4 $VPN_SERVER || echo "Não foi possível fazer ping no servidor VPN"
            
            if [ -n "$VPN_PORT" ]; then
              echo "Porta VPN: $VPN_PORT"
              echo "Testando conexão TCP para $VPN_SERVER:$VPN_PORT:"
              nc -zvw3 $VPN_SERVER $VPN_PORT || echo "Não foi possível conectar à porta do servidor VPN"
            fi
          else
            echo "Não foi possível extrair o servidor VPN do arquivo de configuração"
          fi

          # Escreve credenciais
          echo "$VPN_USERNAME" > auth.txt
          echo "$VPN_PASSWORD" >> auth.txt
          chmod 600 auth.txt

          # Tenta conectar com log verboso
          echo "==== Tentando conexão VPN (modo de teste) ===="
          sudo openvpn --config vpn-config.ovpn --auth-user-pass auth.txt --verb 5 --dev tun0 --cd /tmp --log vpn-test.log --test-crypto

          if [ $? -eq 0 ]; then
            echo "Teste de criptografia passou com sucesso"
          else
            echo "ERRO: Teste de criptografia falhou"
            cat /tmp/vpn-test.log
          fi

          # Tenta conexão real com timeout
          echo "==== Iniciando conexão VPN real ===="
          sudo openvpn --config vpn-config.ovpn --auth-user-pass auth.txt --daemon --log /tmp/vpn.log --verb 5

          # Aguarda e verifica (timeout de 30 segundos)
          echo "Aguardando conexão VPN (30s timeout)..."
          for i in {1..30}; do
            if ip addr | grep -q tun0; then
              echo "Interface tun0 detectada!"
              break
            fi
            sleep 1
            echo -n "."
            # A cada 5 segundos, verifica o status do processo e logs
            if [ $((i % 5)) -eq 0 ]; then
              echo ""
              echo "Status do processo OpenVPN após ${i}s:"
              sudo ps aux | grep openvpn | grep -v grep
              echo "Últimas 10 linhas do log:"
              sudo tail -10 /tmp/vpn.log
            fi
          done

          # Verifica resultado final
          echo "==== Status final da conexão VPN ===="
          if ip addr | grep -q tun0; then
            echo "SUCESSO: VPN conectada! Interface tun0 criada."
            ip addr show tun0
            echo "Novas rotas adicionadas:"
            ip route | grep tun0
            echo "Teste de conectividade através da VPN:"
            ping -c 2 -I tun0 8.8.8.8 || echo "Não foi possível fazer ping através da VPN"
          else
            echo "FALHA: VPN não conectou após 30s de espera"
            echo "Log completo da tentativa de conexão:"
            sudo cat /tmp/vpn.log
            echo "Processos OpenVPN em execução:"
            sudo ps aux | grep openvpn | grep -v grep
            echo "Status do serviço OpenVPN:"
            sudo systemctl status openvpn* || echo "Não foi possível obter status do serviço"
            exit 1
          fi
        env:
          VPN_USERNAME: ${{ secrets.VPN_USERNAME }}
          VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
          VPN_CONFIG: ${{ secrets.VPN_CONFIG }}

      # 6. Implanta no servidor via SSH
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Recomendado: chave SSH
          # password: ${{ secrets.SSH_PASSWORD }}  # Alternativa: senha SSH (menos segura)
          port: ${{ secrets.SSH_PORT }} # Ex.: 2222
          script: |
            docker pull fabricioifc/fabrica-door:${{ github.sha }}
            cd /home/${{ secrets.SSH_USER }}/fabrica-door
            docker-compose up -d --force-recreate
