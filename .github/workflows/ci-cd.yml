name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/fabrica-prod-door:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Criar diretório de projeto se não existir
            mkdir -p ~/fabrica-prod-door

            # Navegar para o diretório do projeto
            cd ~/fabrica-prod-door

            # Clonar/atualizar o repositório
            if [ -d ".git" ]; then
              git pull
            else
              git clone https://github.com/${{ github.repository }}.git .
            fi

            # Login no DockerHub
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            # Baixar a imagem mais recente
            docker pull ${{ secrets.DOCKER_USERNAME }}/fabrica-prod-door:latest

            # Criar arquivo .env se não existir
            if [ ! -f ".env" ]; then
              echo "PORT=${{ secrets.PORT }}" > .env
              # Adicione outras variáveis de ambiente se necessário
            fi

            # Parar containers existentes
            docker-compose down || true

            # Iniciar containers com a nova imagem
            docker-compose up -d

            # Limpar imagens não utilizadas
            docker image prune -f
